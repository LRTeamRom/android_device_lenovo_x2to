From a945c5e9b1d19788cbd414795f6bfb2325c11024 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E7=A7=8B=E5=8F=B6=E9=9A=8F=E9=A3=8Eivan?=
 <yanziily@gmail.com>
Date: Sun, 3 Jan 2016 22:03:19 +0800
Subject: [PATCH] Fix boot for mtk
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Ia628e1992fd978c17da6f9c526160adcdae9a693
Signed-off-by: 秋叶随风ivan <yanziily@gmail.com>

diff -ur core/healthd/BatteryMonitor.cpp core_mtk/healthd/BatteryMonitor.cpp
--- core/healthd/BatteryMonitor.cpp	2016-01-22 15:55:46.497330000 -0800
+++ core_mtk/healthd/BatteryMonitor.cpp	2016-01-23 05:28:26.435234000 -0800
@@ -198,7 +198,11 @@
     props.batteryLevel = mBatteryFixedCapacity ?
         mBatteryFixedCapacity :
         getIntField(mHealthdConfig->batteryCapacityPath);
+#ifndef MTK_HARDWARE
     props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+#else
+    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath);
+#endif
 
     props.batteryTemperature = mBatteryFixedTemperature ?
         mBatteryFixedTemperature :
diff -ur core/init/Android.mk core_mtk/init/Android.mk
--- core/init/Android.mk	2016-01-22 15:55:46.501330000 -0800
+++ core_mtk/init/Android.mk	2016-01-23 05:28:26.439234000 -0800
@@ -29,6 +29,11 @@
 LOCAL_CFLAGS += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_DISABLE_SELINUX=1
 endif
 
+# Enable MTK stuff
+ifeq ($(BOARD_HAS_MTK_HARDWARE), true)
+LOCAL_CFLAGS += -DMTK_HARDWARE
+endif
+
 # Enable ueventd logging
 #LOCAL_CFLAGS += -DLOG_UEVENTS=1
 
diff -ur core/init/init.c core_mtk/init/init.c
--- core/init/init.c	2016-01-22 15:55:46.505330000 -0800
+++ core_mtk/init/init.c	2016-01-23 05:28:26.443234000 -0800
@@ -57,7 +57,6 @@
 #include "util.h"
 #include "ueventd.h"
 #include "watchdogd.h"
-#include "vendor_init.h"
 
 struct selabel_handle *sehandle;
 struct selabel_handle *sehandle_prop;
@@ -515,9 +514,6 @@
 
 void handle_control_message(const char *msg, const char *arg)
 {
-    if (!vendor_handle_control_message(msg, arg))
-        return;
-
     if (!strcmp(msg,"start")) {
         msg_start(arg);
     } else if (!strcmp(msg,"stop")) {
@@ -927,6 +923,9 @@
 static bool selinux_is_enforcing(void)
 {
 #ifdef ALLOW_DISABLE_SELINUX
+    /* things are getting hairier... disable during initial porting */
+    return false;
+
     char tmp[PROP_VALUE_MAX];
 
     if (property_get("ro.boot.selinux", tmp) == 0) {
@@ -1010,7 +1009,11 @@
     }
 
     selinux_init_all_handles();
+#ifdef MTK_HARDWARE
+    bool is_enforcing = false; // Always making selinux permissive for MTK's rild
+#else
     bool is_enforcing = selinux_is_enforcing();
+#endif
     INFO("SELinux: security_setenforce(%d)\n", is_enforcing);
     security_setenforce(is_enforcing);
 }
diff -ur core/init/vendor_init.c core_mtk/init/vendor_init.c
--- core/init/vendor_init.c	2016-01-22 15:55:46.505330000 -0800
+++ core_mtk/init/vendor_init.c	2016-01-23 05:28:26.443234000 -0800
@@ -28,7 +28,6 @@
  */
 
 #include "vendor_init.h"
-#include <errno.h>
 
 /* init vendor override stubs */
 
@@ -36,9 +35,3 @@
 void vendor_load_properties()
 {
 }
-
-__attribute__ ((weak))
-int vendor_handle_control_message(const char *msg, const char *arg)
-{
-    return -ENOSYS;
-}
diff -ur core/init/vendor_init.h core_mtk/init/vendor_init.h
--- core/init/vendor_init.h	2016-01-22 15:55:46.505330000 -0800
+++ core_mtk/init/vendor_init.h	2016-01-23 05:28:26.443234000 -0800
@@ -30,5 +30,4 @@
 #ifndef __INIT_VENDOR__H__
 #define __INIT_VENDOR__H__
 extern void vendor_load_properties(void);
-extern int vendor_handle_control_message(const char *msg, const char *arg);
 #endif /* __INIT_VENDOR__H__ */
diff -ur core/libziparchive/zip_archive.cc core_mtk/libziparchive/zip_archive.cc
--- core/libziparchive/zip_archive.cc	2016-01-22 15:55:46.569330000 -0800
+++ core_mtk/libziparchive/zip_archive.cc	2016-01-23 05:28:26.459234000 -0800
@@ -1124,27 +1124,7 @@
     return kIoError;
   }
 
-  int result = 0;
-#if defined(__linux__)
-  // Make sure we have enough space on the volume to extract the compressed
-  // entry. Note that the call to ftruncate below will change the file size but
-  // will not allocate space on disk.
-  // Note: fallocate is only supported by the following filesystems -
-  // btrfs, ext4, ocfs2, and xfs. Therefore fallocate might fail with
-  // EOPNOTSUPP error when issued in other filesystems.
-  // Hence, check for the return error code before concluding that the
-  // disk does not have enough space.
-  if (declared_length > 0) {
-    result = TEMP_FAILURE_RETRY(fallocate(fd, 0, current_offset, declared_length));
-    if (result == -1 && errno == ENOSPC) {
-      ALOGW("Zip: unable to allocate space for file to %" PRId64 ": %s",
-            static_cast<int64_t>(declared_length + current_offset), strerror(errno));
-      return kIoError;
-    }
-  }
-#endif  // defined(__linux__)
-
-  result = TEMP_FAILURE_RETRY(ftruncate(fd, declared_length + current_offset));
+  int result = TEMP_FAILURE_RETRY(ftruncate(fd, declared_length + current_offset));
   if (result == -1) {
     ALOGW("Zip: unable to truncate file to %" PRId64 ": %s",
           (int64_t)(declared_length + current_offset), strerror(errno));
diff -ur core/mkbootimg/bootimg.h core_mtk/mkbootimg/bootimg.h
--- core/mkbootimg/bootimg.h	2016-01-22 15:55:46.573330000 -0800
+++ core_mtk/mkbootimg/bootimg.h	2016-01-23 05:28:26.459234000 -0800
@@ -26,6 +26,8 @@
 #define BOOT_ARGS_SIZE 512
 #define BOOT_EXTRA_ARGS_SIZE 1024
 
+#define MTK_HEADER_SIZE 512
+
 struct boot_img_hdr
 {
     unsigned char magic[BOOT_MAGIC_SIZE];
diff -ur core/mkbootimg/mkbootimg.c core_mtk/mkbootimg/mkbootimg.c
--- core/mkbootimg/mkbootimg.c	2016-01-22 15:55:46.573330000 -0800
+++ core_mtk/mkbootimg/mkbootimg.c	2016-01-23 05:28:26.459234000 -0800
@@ -25,10 +25,12 @@
 #include "mincrypt/sha.h"
 #include "bootimg.h"
 
-static void *load_file(const char *fn, unsigned *_sz)
+static void *load_file(const char *fn, unsigned *_sz, int is_mtk, const char *mtk_fn)
 {
     char *data;
+    char *buf_start;
     int sz;
+    int buf_sz;
     int fd;
 
     data = 0;
@@ -40,13 +42,36 @@
 
     if(lseek(fd, 0, SEEK_SET) != 0) goto oops;
 
-    data = (char*) malloc(sz);
+    buf_sz = sz + (is_mtk ? MTK_HEADER_SIZE : 0);
+    data = buf_start = (char*) malloc(buf_sz);
     if(data == 0) goto oops;
 
-    if(read(fd, data, sz) != sz) goto oops;
+    if (is_mtk) {
+        /* MTK magic */
+        data[0] = 0x88;
+        data[1] = 0x16;
+        data[2] = 0x88;
+        data[3] = 0x58;
+
+        /* file length in little endian */
+        data[4] = sz & 0xFF;
+        data[5] = (sz >> 8) & 0xFF;
+        data[6] = (sz >> 16) & 0xFF;
+        data[7] = (sz >> 24) & 0xFF;
+
+        /* MTK "file name" */
+        strncpy(data + 8, mtk_fn, 32);
+
+        /* MTK header padding */
+        memset(data + 40, 0xff, MTK_HEADER_SIZE - 40);
+
+        buf_start += MTK_HEADER_SIZE;
+    }
+
+    if(read(fd, buf_start, sz) != sz) goto oops;
     close(fd);
 
-    if(_sz) *_sz = sz;
+    if(_sz) *_sz = buf_sz;
     return data;
 
 oops:
@@ -68,6 +93,7 @@
             "       [ --dt <filename> ]\n"
             "       [ --ramdisk_offset <address> ]\n"
             "       [ --tags_offset <address> ]\n"
+            "       [ --mtk <boot|recovery> ]\n"
             "       -o|--output <filename>\n"
             );
     return 1;
@@ -99,6 +125,8 @@
 {
     boot_img_hdr hdr;
 
+    int is_mtk = 0;
+    int is_mtk_boot = 0;
     char *kernel_fn = 0;
     void *kernel_data = 0;
     char *ramdisk_fn = 0;
@@ -167,6 +195,16 @@
             }
         } else if(!strcmp(arg, "--dt")) {
             dt_fn = val;
+        } else if (!strcmp(arg, "--mtk")) {
+            if (!strcmp(val, "boot")) {
+                is_mtk = 1;
+                is_mtk_boot = 1;
+            } else if (!strcmp(val, "recovery")) {
+                is_mtk = 1;
+                is_mtk_boot = 0;
+            } else {
+                return usage();
+            }
         } else {
             return usage();
         }
@@ -216,7 +254,7 @@
         strncpy((char *)hdr.extra_cmdline, cmdline, BOOT_EXTRA_ARGS_SIZE);
     }
 
-    kernel_data = load_file(kernel_fn, &hdr.kernel_size);
+    kernel_data = load_file(kernel_fn, &hdr.kernel_size, is_mtk, "KERNEL");
     if(kernel_data == 0) {
         fprintf(stderr,"error: could not load kernel '%s'\n", kernel_fn);
         return 1;
@@ -226,7 +264,7 @@
         ramdisk_data = 0;
         hdr.ramdisk_size = 0;
     } else {
-        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size);
+        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size, is_mtk, is_mtk_boot ? "ROOTFS" : "RECOVERY");
         if(ramdisk_data == 0) {
             fprintf(stderr,"error: could not load ramdisk '%s'\n", ramdisk_fn);
             return 1;
@@ -234,7 +272,7 @@
     }
 
     if(second_fn) {
-        second_data = load_file(second_fn, &hdr.second_size);
+        second_data = load_file(second_fn, &hdr.second_size, is_mtk, "");
         if(second_data == 0) {
             fprintf(stderr,"error: could not load secondstage '%s'\n", second_fn);
             return 1;
@@ -242,7 +280,7 @@
     }
 
     if(dt_fn) {
-        dt_data = load_file(dt_fn, &hdr.dt_size);
+        dt_data = load_file(dt_fn, &hdr.dt_size, is_mtk, "");
         if (dt_data == 0) {
             fprintf(stderr,"error: could not load device tree image '%s'\n", dt_fn);
             return 1;
diff -ur core/mkbootimg/unpackbootimg.c core_mtk/mkbootimg/unpackbootimg.c
--- core/mkbootimg/unpackbootimg.c	2016-01-22 15:55:46.573330000 -0800
+++ core_mtk/mkbootimg/unpackbootimg.c	2016-01-23 05:28:26.459234000 -0800
@@ -38,11 +38,21 @@
     fclose(f);
 }
 
+void maybe_skip_mtk_header(FILE* f, int is_mtk)
+{
+    if (!is_mtk) {
+        return;
+    }
+
+    fseek(f, MTK_HEADER_SIZE, SEEK_CUR);
+}
+
 int usage() {
     printf("usage: unpackbootimg\n");
     printf("\t-i|--input boot.img\n");
     printf("\t[ -o|--output output_directory]\n");
     printf("\t[ -p|--pagesize <size-in-hexadecimal> ]\n");
+    printf("\t[ --mtk 1 ]\n");
     return 0;
 }
 
@@ -52,6 +62,7 @@
     char* directory = "./";
     char* filename = NULL;
     int pagesize = 0;
+    int is_mtk = 0;
 
     argc--;
     argv++;
@@ -66,6 +77,12 @@
             directory = val;
         } else if(!strcmp(arg, "--pagesize") || !strcmp(arg, "-p")) {
             pagesize = strtoul(val, 0, 16);
+        } else if (!strcmp(arg, "--mtk")) {
+            if (!strcmp(val, "1")) {
+                is_mtk = 1;
+            }
+
+            return usage();
         } else {
             return usage();
         }
@@ -153,23 +170,27 @@
     //printf("total read: %d\n", total_read);
     total_read += read_padding(f, sizeof(header), pagesize);
 
+    int mtk_size_adjust = is_mtk ? -MTK_HEADER_SIZE : 0;
+
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-zImage");
     FILE *k = fopen(tmp, "wb");
-    byte* kernel = (byte*)malloc(header.kernel_size);
+    byte* kernel = (byte*)malloc(header.kernel_size + mtk_size_adjust);
     //printf("Reading kernel...\n");
-    fread(kernel, header.kernel_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(kernel, header.kernel_size + mtk_size_adjust, 1, f);
     total_read += header.kernel_size;
-    fwrite(kernel, header.kernel_size, 1, k);
+    fwrite(kernel, header.kernel_size + mtk_size_adjust, 1, k);
     fclose(k);
 
     //printf("total read: %d\n", header.kernel_size);
     total_read += read_padding(f, header.kernel_size, pagesize);
 
 
-    byte* ramdisk = (byte*)malloc(header.ramdisk_size);
+    byte* ramdisk = (byte*)malloc(header.ramdisk_size + mtk_size_adjust);
     //printf("Reading ramdisk...\n");
-    fread(ramdisk, header.ramdisk_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, f);
     total_read += header.ramdisk_size;
     sprintf(tmp, "%s/%s", directory, basename(filename));
     if(ramdisk[0] == 0x02 && ramdisk[1]== 0x21)
@@ -177,7 +198,7 @@
     else
         strcat(tmp, "-ramdisk.gz");
     FILE *r = fopen(tmp, "wb");
-    fwrite(ramdisk, header.ramdisk_size, 1, r);
+    fwrite(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, r);
     fclose(r);
 
     total_read += read_padding(f, header.ramdisk_size, pagesize);
@@ -185,11 +206,12 @@
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-second");
     FILE *s = fopen(tmp, "wb");
-    byte* second = (byte*)malloc(header.second_size);
+    byte* second = (byte*)malloc(header.second_size + mtk_size_adjust);
     //printf("Reading second...\n");
-    fread(second, header.second_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(second, header.second_size + mtk_size_adjust, 1, f);
     total_read += header.second_size;
-    fwrite(second, header.second_size, 1, r);
+    fwrite(second, header.second_size + mtk_size_adjust, 1, r);
     fclose(s);
 
     total_read += read_padding(f, header.second_size, pagesize);
@@ -197,11 +219,12 @@
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-dt");
     FILE *d = fopen(tmp, "wb");
-    byte* dt = (byte*)malloc(header.dt_size);
+    byte* dt = (byte*)malloc(header.dt_size + mtk_size_adjust);
     //printf("Reading dt...\n");
-    fread(dt, header.dt_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(dt, header.dt_size + mtk_size_adjust, 1, f);
     total_read += header.dt_size;
-    fwrite(dt, header.dt_size, 1, r);
+    fwrite(dt, header.dt_size + mtk_size_adjust, 1, r);
     fclose(d);
     
     fclose(f);
Only in core_mtk: README.md
diff -ur core/rootdir/init.trace.rc core_mtk/rootdir/init.trace.rc
--- core/rootdir/init.trace.rc	2016-01-22 15:55:46.573330000 -0800
+++ core_mtk/rootdir/init.trace.rc	2016-01-23 05:28:26.459234000 -0800
@@ -3,25 +3,30 @@
 on early-boot
 
 # Allow writing to the kernel trace log.
+    mount debugfs debugfs /sys/kernel/debug
+    chmod 0755 /sys/kernel/debug
     chmod 0222 /sys/kernel/debug/tracing/trace_marker
 
 # Allow the shell group to enable (some) kernel tracing.
     chown root shell /sys/kernel/debug/tracing/trace_clock
-    chown root shell /sys/kernel/debug/tracing/buffer_size_kb
+    chown system shell /sys/kernel/debug/tracing/buffer_size_kb
     chown root shell /sys/kernel/debug/tracing/options/overwrite
-    chown root shell /sys/kernel/debug/tracing/options/print-tgid
+    chown root shell /sys/kernel/debug/tracing/options/record-cmd
     chown root shell /sys/kernel/debug/tracing/events/sched/sched_switch/enable
     chown root shell /sys/kernel/debug/tracing/events/sched/sched_wakeup/enable
     chown root shell /sys/kernel/debug/tracing/events/power/cpu_frequency/enable
     chown root shell /sys/kernel/debug/tracing/events/power/cpu_idle/enable
     chown root shell /sys/kernel/debug/tracing/events/power/clock_set_rate/enable
     chown root shell /sys/kernel/debug/tracing/events/cpufreq_interactive/enable
-    chown root shell /sys/kernel/debug/tracing/tracing_on
+    # change to system owner for AMS to control
+    chown system shell /sys/kernel/debug/tracing/tracing_on
+    chown system shell /sys/kernel/debug/tracing/tracing_enabled
+    chown root shell /sys/kernel/debug/tracing/set_event
 
     chmod 0664 /sys/kernel/debug/tracing/trace_clock
     chmod 0664 /sys/kernel/debug/tracing/buffer_size_kb
     chmod 0664 /sys/kernel/debug/tracing/options/overwrite
-    chmod 0664 /sys/kernel/debug/tracing/options/print-tgid
+    chmod 0664 /sys/kernel/debug/tracing/options/record-cmd
     chmod 0664 /sys/kernel/debug/tracing/events/sched/sched_switch/enable
     chmod 0664 /sys/kernel/debug/tracing/events/sched/sched_wakeup/enable
     chmod 0664 /sys/kernel/debug/tracing/events/power/cpu_frequency/enable
@@ -29,7 +34,9 @@
     chmod 0664 /sys/kernel/debug/tracing/events/power/clock_set_rate/enable
     chmod 0664 /sys/kernel/debug/tracing/events/cpufreq_interactive/enable
     chmod 0664 /sys/kernel/debug/tracing/tracing_on
+    chmod 0664 /sys/kernel/debug/tracing/tracing_enabled
+    chmod 0664 /sys/kernel/debug/tracing/set_event
 
 # Allow only the shell group to read and truncate the kernel trace.
-    chown root shell /sys/kernel/debug/tracing/trace
-    chmod 0660 /sys/kernel/debug/tracing/trace
+    chown system shell /sys/kernel/debug/tracing/trace
+    chmod 0664 /sys/kernel/debug/tracing/trace

